/**
 * Semantic conventions for OpenInference tracing
 */
export var SemanticAttributePrefixes = {
    input: "input",
    output: "output",
    llm: "llm",
    retrieval: "retrieval",
    reranker: "reranker",
    messages: "messages",
    message: "message",
    document: "document",
    embedding: "embedding",
    tool: "tool",
    tool_call: "tool_call",
    metadata: "metadata",
    tag: "tag",
    session: "session",
    user: "user",
    openinference: "openinference",
    message_content: "message_content",
    image: "image",
};
export var LLMAttributePostfixes = {
    model_name: "model_name",
    token_count: "token_count",
    input_messages: "input_messages",
    output_messages: "output_messages",
    invocation_parameters: "invocation_parameters",
    prompts: "prompts",
    prompt_template: "prompt_template",
    function_call: "function_call",
};
export var LLMPromptTemplateAttributePostfixes = {
    variables: "variables",
    template: "template",
};
export var RetrievalAttributePostfixes = {
    documents: "documents",
};
export var RerankerAttributePostfixes = {
    input_documents: "input_documents",
    output_documents: "output_documents",
    query: "query",
    model_name: "model_name",
    top_k: "top_k",
};
export var EmbeddingAttributePostfixes = {
    embeddings: "embeddings",
    text: "text",
    model_name: "model_name",
    vector: "vector",
};
export var ToolAttributePostfixes = {
    name: "name",
    description: "description",
    parameters: "parameters",
};
export var MessageAttributePostfixes = {
    role: "role",
    content: "content",
    contents: "contents",
    name: "name",
    function_call_name: "function_call_name",
    function_call_arguments_json: "function_call_arguments_json",
    tool_calls: "tool_calls",
};
export var MessageContentsAttributePostfixes = {
    type: "type",
    text: "text",
    image: "image",
};
export var ImageAttributesPostfixes = {
    url: "url",
};
export var ToolCallAttributePostfixes = {
    function_name: "function.name",
    function_arguments_json: "function.arguments",
};
export var DocumentAttributePostfixes = {
    id: "id",
    content: "content",
    score: "score",
    metadata: "metadata",
};
export var TagAttributePostfixes = {
    tags: "tags",
};
export var SessionAttributePostfixes = {
    id: "id",
};
export var UserAttributePostfixes = {
    id: "id",
};
/**
 * The input to any span
 */
export var INPUT_VALUE = "".concat(SemanticAttributePrefixes.input, ".value");
export var INPUT_MIME_TYPE = "".concat(SemanticAttributePrefixes.input, ".mime_type");
/**
 * The output of any span
 */
export var OUTPUT_VALUE = "".concat(SemanticAttributePrefixes.output, ".value");
export var OUTPUT_MIME_TYPE = "".concat(SemanticAttributePrefixes.output, ".mime_type");
/**
 * The messages sent to the LLM for completions
 * Typically seen in OpenAI chat completions
 * @see https://beta.openai.com/docs/api-reference/completions/create
 */
export var LLM_INPUT_MESSAGES = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.input_messages);
/**
 * The prompts sent to the LLM for completions
 * Typically seen in OpenAI legacy completions
 * @see https://beta.openai.com/docs/api-reference/completions/create
 */
export var LLM_PROMPTS = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.prompts);
/**
 * The JSON representation of the parameters passed to the LLM
 */
export var LLM_INVOCATION_PARAMETERS = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.invocation_parameters);
/**
 * The messages received from the LLM for completions
 * Typically seen in OpenAI chat completions
 * @see https://platform.openai.com/docs/api-reference/chat/object#choices-message
 */
export var LLM_OUTPUT_MESSAGES = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.output_messages);
/**
 * The name of the LLM model
 */
export var LLM_MODEL_NAME = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.model_name);
/** Token count for the completion by the llm */
export var LLM_TOKEN_COUNT_COMPLETION = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.token_count, ".completion");
/** Token count for the prompt to the llm */
export var LLM_TOKEN_COUNT_PROMPT = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.token_count, ".prompt");
/** Token count for the entire transaction with the llm */
export var LLM_TOKEN_COUNT_TOTAL = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.token_count, ".total");
/**
 * The role that the LLM assumes the message is from
 * during the LLM invocation
 */
export var MESSAGE_ROLE = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.role);
/**
 * The name of the message. This is only used for role 'function' where the name
 * of the function is captured in the name field and the parameters are captured in the
 * content.
 */
export var MESSAGE_NAME = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.name);
/**
 * The tool calls generated by the model, such as function calls.
 */
export var MESSAGE_TOOL_CALLS = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.tool_calls);
/**
 * tool_call.function.name
 */
export var TOOL_CALL_FUNCTION_NAME = "".concat(SemanticAttributePrefixes.tool_call, ".").concat(ToolCallAttributePostfixes.function_name);
/**
 * tool_call.function.argument (JSON string)
 */
export var TOOL_CALL_FUNCTION_ARGUMENTS_JSON = "".concat(SemanticAttributePrefixes.tool_call, ".").concat(ToolCallAttributePostfixes.function_arguments_json);
/**
 * The LLM function call function name
 */
export var MESSAGE_FUNCTION_CALL_NAME = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.function_call_name);
/**
 * The LLM function call function arguments in a json string
 */
export var MESSAGE_FUNCTION_CALL_ARGUMENTS_JSON = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.function_call_arguments_json);
/**
 * The content of the message sent to the LLM
 */
export var MESSAGE_CONTENT = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.content);
/**
 * The array of contents for the message sent to the LLM. Each element of the array is
 * an `message_content` object.
 */
export var MESSAGE_CONTENTS = "".concat(SemanticAttributePrefixes.message, ".").concat(MessageAttributePostfixes.contents);
/**
 * The type of content sent to the LLM
 */
export var MESSAGE_CONTENT_TYPE = "".concat(SemanticAttributePrefixes.message_content, ".").concat(MessageContentsAttributePostfixes.type);
/**
 * The text content of the message sent to the LLM
 */
export var MESSAGE_CONTENT_TEXT = "".concat(SemanticAttributePrefixes.message_content, ".").concat(MessageContentsAttributePostfixes.text);
/**
 * The image content of the message sent to the LLM
 */
export var MESSAGE_CONTENT_IMAGE = "".concat(SemanticAttributePrefixes.message_content, ".").concat(MessageContentsAttributePostfixes.image);
/**
 * The http or base64 link to the image
 */
export var IMAGE_URL = "".concat(SemanticAttributePrefixes.image, ".").concat(ImageAttributesPostfixes.url);
export var DOCUMENT_ID = "".concat(SemanticAttributePrefixes.document, ".").concat(DocumentAttributePostfixes.id);
export var DOCUMENT_CONTENT = "".concat(SemanticAttributePrefixes.document, ".").concat(DocumentAttributePostfixes.content);
export var DOCUMENT_SCORE = "".concat(SemanticAttributePrefixes.document, ".").concat(DocumentAttributePostfixes.score);
export var DOCUMENT_METADATA = "".concat(SemanticAttributePrefixes.document, ".").concat(DocumentAttributePostfixes.metadata);
/**
 * The text that was embedded to create the vector
 */
export var EMBEDDING_TEXT = "".concat(SemanticAttributePrefixes.embedding, ".").concat(EmbeddingAttributePostfixes.text);
/**
 * The name of the model that was used to create the vector
 */
export var EMBEDDING_MODEL_NAME = "".concat(SemanticAttributePrefixes.embedding, ".").concat(EmbeddingAttributePostfixes.model_name);
/**
 * The embedding vector. Typically a high dimensional vector of floats or ints
 */
export var EMBEDDING_VECTOR = "".concat(SemanticAttributePrefixes.embedding, ".").concat(EmbeddingAttributePostfixes.vector);
/**
 * The embedding list root
 */
export var EMBEDDING_EMBEDDINGS = "".concat(SemanticAttributePrefixes.embedding, ".").concat(EmbeddingAttributePostfixes.embeddings);
/**
 * The retrieval documents list root
 */
export var RETRIEVAL_DOCUMENTS = "".concat(SemanticAttributePrefixes.retrieval, ".").concat(RetrievalAttributePostfixes.documents);
var PROMPT_TEMPLATE_PREFIX = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.prompt_template);
/**
 * The JSON representation of the variables used in the prompt template
 */
export var PROMPT_TEMPLATE_VARIABLES = "".concat(PROMPT_TEMPLATE_PREFIX, ".variables");
/**
 * A prompt template
 */
export var PROMPT_TEMPLATE_TEMPLATE = "".concat(PROMPT_TEMPLATE_PREFIX, ".template");
/**
 * The JSON representation of a function call of an LLM
 */
export var LLM_FUNCTION_CALL = "".concat(SemanticAttributePrefixes.llm, ".").concat(LLMAttributePostfixes.function_call);
/**
 * The name of a tool
 */
export var TOOL_NAME = "".concat(SemanticAttributePrefixes.tool, ".").concat(ToolAttributePostfixes.name);
/**
 * The description of a tool
 */
export var TOOL_DESCRIPTION = "".concat(SemanticAttributePrefixes.tool, ".").concat(ToolAttributePostfixes.description);
/**
 * The session id of a trace. Used to correlate spans in a single session.
 */
export var SESSION_ID = "".concat(SemanticAttributePrefixes.session, ".").concat(SessionAttributePostfixes.id);
/**
 * The user id of a trace. Used to correlate spans for a single user.
 */
export var USER_ID = "".concat(SemanticAttributePrefixes.user, ".").concat(UserAttributePostfixes.id);
export var SemanticConventions = {
    INPUT_VALUE: INPUT_VALUE,
    INPUT_MIME_TYPE: INPUT_MIME_TYPE,
    OUTPUT_VALUE: OUTPUT_VALUE,
    OUTPUT_MIME_TYPE: OUTPUT_MIME_TYPE,
    LLM_INPUT_MESSAGES: LLM_INPUT_MESSAGES,
    LLM_OUTPUT_MESSAGES: LLM_OUTPUT_MESSAGES,
    LLM_MODEL_NAME: LLM_MODEL_NAME,
    LLM_PROMPTS: LLM_PROMPTS,
    LLM_INVOCATION_PARAMETERS: LLM_INVOCATION_PARAMETERS,
    LLM_TOKEN_COUNT_COMPLETION: LLM_TOKEN_COUNT_COMPLETION,
    LLM_TOKEN_COUNT_PROMPT: LLM_TOKEN_COUNT_PROMPT,
    LLM_TOKEN_COUNT_TOTAL: LLM_TOKEN_COUNT_TOTAL,
    MESSAGE_ROLE: MESSAGE_ROLE,
    MESSAGE_NAME: MESSAGE_NAME,
    MESSAGE_TOOL_CALLS: MESSAGE_TOOL_CALLS,
    TOOL_CALL_FUNCTION_NAME: TOOL_CALL_FUNCTION_NAME,
    TOOL_CALL_FUNCTION_ARGUMENTS_JSON: TOOL_CALL_FUNCTION_ARGUMENTS_JSON,
    MESSAGE_FUNCTION_CALL_NAME: MESSAGE_FUNCTION_CALL_NAME,
    MESSAGE_FUNCTION_CALL_ARGUMENTS_JSON: MESSAGE_FUNCTION_CALL_ARGUMENTS_JSON,
    MESSAGE_CONTENT: MESSAGE_CONTENT,
    DOCUMENT_ID: DOCUMENT_ID,
    DOCUMENT_CONTENT: DOCUMENT_CONTENT,
    DOCUMENT_SCORE: DOCUMENT_SCORE,
    DOCUMENT_METADATA: DOCUMENT_METADATA,
    EMBEDDING_EMBEDDINGS: EMBEDDING_EMBEDDINGS,
    EMBEDDING_TEXT: EMBEDDING_TEXT,
    EMBEDDING_MODEL_NAME: EMBEDDING_MODEL_NAME,
    EMBEDDING_VECTOR: EMBEDDING_VECTOR,
    TOOL_DESCRIPTION: TOOL_DESCRIPTION,
    TOOL_NAME: TOOL_NAME,
    PROMPT_TEMPLATE_VARIABLES: PROMPT_TEMPLATE_VARIABLES,
    PROMPT_TEMPLATE_TEMPLATE: PROMPT_TEMPLATE_TEMPLATE,
    LLM_FUNCTION_CALL: LLM_FUNCTION_CALL,
    RETRIEVAL_DOCUMENTS: RETRIEVAL_DOCUMENTS,
    SESSION_ID: SESSION_ID,
    USER_ID: USER_ID,
    // OpenInference steps
    OPENINFERENCE_SPAN_KIND: "".concat(SemanticAttributePrefixes.openinference, ".span.kind"),
};
export var OpenInferenceSpanKind;
(function (OpenInferenceSpanKind) {
    OpenInferenceSpanKind["LLM"] = "llm";
    OpenInferenceSpanKind["CHAIN"] = "chain";
    OpenInferenceSpanKind["TOOL"] = "tool";
    OpenInferenceSpanKind["RETRIEVER"] = "retriever";
    OpenInferenceSpanKind["RERANKER"] = "reranker";
    OpenInferenceSpanKind["EMBEDDING"] = "embedding";
    OpenInferenceSpanKind["AGENT"] = "agent";
    OpenInferenceSpanKind["GUARDRAIL"] = "guardrail";
})(OpenInferenceSpanKind || (OpenInferenceSpanKind = {}));
export var MimeType;
(function (MimeType) {
    MimeType["TEXT"] = "text/plain";
    MimeType["JSON"] = "application/json";
})(MimeType || (MimeType = {}));
//# sourceMappingURL=SemanticConventions.js.map